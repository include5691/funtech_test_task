services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - app_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka_broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  kafka-init:
    image: confluentinc/cp-kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - app_network
    command: >
      sh -c "kafka-topics --bootstrap-server kafka:9092 --create --topic new-orders --partitions 1 --replication-factor 1"

  migrations:
    build:
      context: . 
    command: >
      sh -c "cd /app/src && alembic upgrade head"
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app_network

  api:
    build:
      context: .
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network

  kafka_consumer:
    build:
      context: .
    command: python3 -m src.kafka_consumer
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - app_network
    restart: on-failure

  worker:
    build:
      context: .
    command: python -m celery -A src.celery_app.worker worker --loglevel=info
    volumes:
      - ./src:/app/src
      - ./.env:/app/.env
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - app_network
    restart: on-failure

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: